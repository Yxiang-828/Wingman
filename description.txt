# Create the virtual environment (only run this once)
py -m venv .venv

# Activate the virtual environment
.venv\Scripts\activate


cd Wingman-backend 
.venv\Scripts\activate 
uvicorn main:app --reload
npm run dev:full


-----------------------------------------------------------------------------------------------

## **DATABASE SCHEMA REPORT (Updated)**

### **1. users**

**Columns:**

* `id`: UUID, primary key
* `name`: text, not null
* `email`: text, unique, not null
* `password`: text, not null
* `created_at`: timestamptz, not null
* `updated_at`: timestamptz, default current\_timestamp
* `username`: text, not null, unique ¬†**‚¨ÖÔ∏è New**

**RLS Policy:**
Users can only select, insert, update, and delete their own record.

**Summary of Changes:**

* üÜï Added `username` (text, not null, unique)

---

### **2. user\_settings**

**Columns:**

* `id`: bigint, primary key
* `user_id`: UUID, foreign key referencing `users(id)`, on delete cascade
* `setting_key`: text, not null
* `setting_value`: text, not null

**RLS Policy:**
Users can only select, insert, update, and delete their own settings.

**Relationship:**
Many-to-one with `users` via `user_id`.

---

### **3. calendar\_events**

**Columns:**

* `id`: bigint, primary key
* `user_id`: UUID, foreign key referencing `users(id)`, on delete cascade
* `title`: text, not null
* `event_date`: date, not null
* `event_time`: time, not null
* `type`: text, with a CHECK constraint for allowed values
* `description`: text
* `created_at`: timestamptz, not null
* `updated_at`: timestamptz, default current\_timestamp

**RLS Policy:**
Users can only select, insert, update, and delete their own calendar events.

**Relationship:**
Many-to-one with `users` via `user_id`.

---

### **4. tasks**

**Columns:**

* `id`: bigint, primary key
* `user_id`: UUID, foreign key referencing `users(id)`, on delete cascade
* `text`: text, not null
* `task_date`: date, not null
* `task_time`: time, not null
* `completed`: boolean, default false
* `created_at`: timestamptz, not null
* `updated_at`: timestamptz, default current\_timestamp

**RLS Policy:**
Users can only select, insert, update, and delete their own tasks.

**Relationship:**
Many-to-one with `users` via `user_id`.

---

### **5. diary\_entries**

**Columns:**

* `id`: bigint, primary key
* `user_id`: UUID, foreign key referencing `users(id)`, on delete cascade
* `entry_date`: date, not null
* `title`: text, not null
* `content`: text, not null
* `mood`: enum `mood_scale`
* `created_at`: timestamptz, not null
* `updated_at`: timestamptz, default current\_timestamp

**RLS Policy:**
Users can only select, insert, update, and delete their own diary entries.

**Relationship:**
Many-to-one with `users` via `user_id`.

---

### **6. chat\_sessions**

**Columns:**

* `id`: bigint, primary key
* `user_id`: UUID, foreign key referencing `users(id)`, on delete cascade
* `title`: text, optional
* `started_at`: timestamptz, default current\_timestamp
* `updated_at`: timestamptz, default current\_timestamp

**RLS Policy:**
Users can only select, insert, update, and delete their own chat sessions.

**Relationship:**
Many-to-one with `users` via `user_id`.

---

### **7. chat\_messages**

**Columns:**

* `id`: bigint, primary key
* `session_id`: bigint, foreign key referencing `chat_sessions(id)`, on delete cascade
* `is_ai`: boolean, default false
* `message`: text, not null
* `timestamp`: timestamptz, default current\_timestamp
* `updated_at`: timestamptz, default current\_timestamp

**RLS Policy:**
Users can only select, insert, update, and delete their own chat messages.

**Relationship:**
Many-to-one with `chat_sessions` via `session_id`.

---

### **8. chat\_history** *(archived/log data; standalone)*

**Columns:**

* `id`: int, primary key
* `user_id`: UUID
* `message`: text
* `timestamp`: timestamptz
* `is_ai`: boolean

**RLS Policy:**
Not specified (assumed users can only view their own records if enforced).

**Note:**
Not connected via foreign key, but contains `user_id`.

---

### **RELATIONSHIPS SUMMARY**

* `users` is the central table.
* The following tables have foreign keys referencing `users(id)` with **ON DELETE CASCADE**:
  ¬† - `user_settings`
  ¬† - `calendar_events`
  ¬† - `tasks`
  ¬† - `diary_entries`
  ¬† - `chat_sessions`
* `chat_messages` references `chat_sessions(id)` with **ON DELETE CASCADE**.
* `chat_history` includes `user_id` but lacks a formal foreign key.

---

### **RLS SECURITY MODEL SUMMARY**

All major user-owned tables enforce **Row Level Security**:

* **SELECT / INSERT / UPDATE / DELETE** rights are restricted to records owned by the user via `user_id`.
* Ensures strict **per-user data isolation** across calendar, diary, tasks, settings, and chat components.

---

Let me know if you'd like this exported to a file (Markdown, PDF, etc.) or diagrammed visually.
