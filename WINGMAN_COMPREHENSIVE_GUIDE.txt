===============================================================================
üöÅ WINGMAN - COMPREHENSIVE APPLICATION GUIDE
===============================================================================

üìã OVERVIEW
-----------
Wingman is a modern personal assistant desktop application that combines task 
management, calendar events, diary entries, and an AI chatbot in one unified 
interface. Built with React + TypeScript frontend and FastAPI + Python backend,
packaged as a cross-platform Electron application.

üèóÔ∏è PROJECT STRUCTURE
--------------------
Wingman/
‚îú‚îÄ‚îÄ src/                     # Frontend React/TypeScript code
‚îÇ   ‚îú‚îÄ‚îÄ api/                 # API client functions
‚îÇ   ‚îú‚îÄ‚îÄ components/          # React components
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ Calendar/        # Calendar views (Day/Week/Month)
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ ChatBot/         # AI assistant interface
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ Dashboard/       # Main dashboard cards
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ Diary/           # Journal functionality
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ Header/          # Top navigation
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ Profile/         # User authentication & settings
‚îÇ   ‚îÇ   ‚îî‚îÄ‚îÄ Sidebar/         # Left navigation menu
‚îÇ   ‚îú‚îÄ‚îÄ context/             # React context providers (central state)
‚îÇ   ‚îÇ   ‚îî‚îÄ‚îÄ DataContext.tsx  # Core data management & caching
‚îÇ   ‚îú‚îÄ‚îÄ hooks/               # Custom React hooks
‚îÇ   ‚îú‚îÄ‚îÄ types/               # TypeScript definitions
‚îÇ   ‚îú‚îÄ‚îÄ utils/               # Utility functions
‚îÇ   ‚îî‚îÄ‚îÄ main.tsx            # Application entry point
‚îú‚îÄ‚îÄ Wingman-backend/         # Python FastAPI backend
‚îÇ   ‚îú‚îÄ‚îÄ app/
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ api/v1/         # API endpoints
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ core/           # Configuration & database
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ services/       # Business logic
‚îÇ   ‚îÇ   ‚îî‚îÄ‚îÄ tasks/          # Task management
‚îÇ   ‚îî‚îÄ‚îÄ main.py             # Backend entry point
‚îú‚îÄ‚îÄ electron/                # Electron main process
‚îÇ   ‚îú‚îÄ‚îÄ main.js             # Electron configuration
‚îÇ   ‚îî‚îÄ‚îÄ preload.js          # Context bridge
‚îî‚îÄ‚îÄ dist/                   # Built application output

===============================================================================
‚öôÔ∏è DEVELOPMENT VS PRODUCTION ARCHITECTURE
===============================================================================

üîß DEVELOPMENT MODE OPTIONS & PRODUCTION PARITY ANALYSIS
--------------------------------------------------------

üéØ **PRODUCTION REALITY**
```javascript
// In production .exe:
app.whenReady().then(() => {
  startBackendServer().then(() => {  // ‚úÖ Electron spawns backend
    createWindow();                  // ‚úÖ Then creates window
  })
});
```

üîß **DEVELOPMENT COMPARISON**

### **OPTION 1: `npm run dev:electron` (CLOSER TO PRODUCTION - RECOMMENDED)**
```bash
npm run dev:electron
# ‚Üí Vite frontend (5173) + Electron spawns backend (8080)
```

**What happens:**
```
Process 1: Vite dev server (localhost:5173)
Process 2: Electron main process
  ‚îú‚îÄ‚îÄ Spawns Python backend (127.0.0.1:8080)  ‚úÖ SAME AS PRODUCTION
  ‚îú‚îÄ‚îÄ Loads http://localhost:5173              ‚úÖ Different URL, same pattern
  ‚îî‚îÄ‚îÄ Manages backend lifecycle                ‚úÖ SAME AS PRODUCTION
```

### **OPTION 2: Separate `dev` + `electron:dev` (FARTHER FROM PRODUCTION)**
```bash
# Terminal 1:
npm run dev          # Vite (5173)

# Terminal 2: 
./venvset.bat        # Manual backend (8080)

# Terminal 3:
npm run electron:dev # Electron (detects existing backend)
```

**What happens:**
```
Process 1: Vite dev server (localhost:5173)
Process 2: Manual Python backend (127.0.0.1:8080)    ‚ùå NOT like production
Process 3: Electron main process
  ‚îú‚îÄ‚îÄ Detects existing backend                       ‚ùå NOT like production
  ‚îú‚îÄ‚îÄ Loads http://localhost:5173                    ‚úÖ Different URL
  ‚îî‚îÄ‚îÄ NO backend management                          ‚ùå NOT like production
```

üéØ **RECOMMENDATION: Use `dev:electron`**

**Current architecture is PERFECT for this approach:**

```json
{
  "scripts": {
    "dev:electron": "concurrently \"npm run dev\" \"wait-on http://localhost:5173 && npm run electron:dev\""
  }
}
```

**This gives you:**
- ‚úÖ **Production parity** - Same process management
- ‚úÖ **Fast development** - Vite hot reload still works
- ‚úÖ **Real testing** - Same code paths as production
- ‚úÖ **Single command** - Easy workflow

===============================================================================
üõ†Ô∏è DEPENDENCIES & COMPATIBILITY
===============================================================================

üêç PYTHON REQUIREMENTS
----------------------
VERSION: Python 3.13+ (with 3.13 compatibility patches)

CORE DEPENDENCIES:
- fastapi==0.110.0          # Web framework
- uvicorn==0.29.0           # ASGI server
- supabase==1.0.3           # Database client
- pydantic==2.11.4          # Data validation
- pydantic-settings==2.9.1  # Settings management
- python-dotenv==1.1.0      # Environment variables

COMPATIBILITY LAYER:
- patch-orjson.py           # Python 3.13 JSON compatibility
- Standard library fallbacks for orjson dependency

üì¶ NODE.JS REQUIREMENTS
-----------------------
VERSION: Node.js 18+

FRONTEND CORE:
- react ^18.2.0             # UI framework
- react-dom ^18.2.0         # DOM rendering
- react-router-dom ^6.30.1  # Routing
- typescript ^5.2.2         # Type safety
- vite ^5.0.8               # Build tool

DATA & API:
- @tanstack/react-query ^5.59.0  # Server state management
- @supabase/supabase-js ^2.49.8  # Database client
- axios ^1.9.0              # HTTP client
- date-fns ^2.30.0          # Date utilities

DESKTOP:
- electron ^27.1.3          # Desktop wrapper
- electron-builder ^24.8.1  # Packaging tool

DEVELOPMENT:
- concurrently ^8.2.2       # Run multiple commands
- wait-on ^7.2.0            # Wait for services
- cross-env ^7.0.3          # Environment variables

üóÑÔ∏è DATABASE (SUPABASE)
----------------------
TABLES:
1. users - User authentication & profiles
2. tasks - Task management with urgency levels
3. calendar_events - Scheduled events
4. diary_entries - Journal entries with mood tracking
5. user_settings - User preferences
6. chat_sessions - AI chatbot conversations
7. chat_messages - Individual chat messages

RLS POLICIES: All tables have Row Level Security ensuring users can only 
access their own data.

===============================================================================
üöÄ BUILD & DEPLOYMENT PROCESS
===============================================================================

üìã DEVELOPMENT SETUP
--------------------
1. Clone repository
2. Install Node.js dependencies: npm install
3. Create Python virtual environment: 
   cd Wingman-backend && python -m venv .venv (or py since python 3.13 on WIN)
4. Install Python dependencies: 
   .venv\Scripts\activate && pip install -r requirements.txt
5. Create environment files:
   - .env (root): VITE_SUPABASE_URL, VITE_SUPABASE_KEY
   - Wingman-backend/.env: SUPABASE_URL, SUPABASE_KEY
6. Run development: npm run dev:full

üèóÔ∏è PRODUCTION BUILD
-------------------

BUILD PROCESS:
1. Frontend build: npm run build (creates dist/)
2. Python environment preparation
3. Electron packaging: npm run electron:build:win
4. Output: Self-contained .exe installer

OPTIMIZATIONS IMPLEMENTED:
- Simple date-based caching (no complex week calculations)
- Debounced API calls to prevent duplicate submissions
- Request deduplication in API client
- Form submission state tracking
- Event prevention in click handlers

PACKAGING INCLUDES:
- Bundled React application (dist/)
- Embedded Python backend (Wingman-backend/)
- Python runtime compatibility layer
- Electron wrapper with auto-backend startup

===============================================================================
üéØ DATA ARCHITECTURE & PERFORMANCE
===============================================================================

üîÑ DATA FLOW ARCHITECTURE
------------------------
The application uses a centralized data management approach:

1. **DataContext Provider**:
   - Central state management
   - Simple date-based caching system
   - Optimistic UI updates with backend synchronization

2. **API Layer**:
   - Axios-based HTTP client with retry mechanisms
   - Request deduplication to prevent doubles
   - Auto-invalidation of affected cache entries

3. **Core Data Flow**:
```
Component ‚Üí DataContext ‚Üí API Client ‚Üí Backend ‚Üí Supabase ‚Üí 
Response ‚Üí Cache Update ‚Üí Component Re-render
```

4. **Optimistic Updates**:
```
User Action ‚Üí Immediate UI Update ‚Üí 
Background API Call ‚Üí Confirm/Rollback
```

üõ†Ô∏è CACHING STRATEGY
------------------
The application uses simple date-based caching:

1. **Present-Based Data Loading**:
   - Cache keys use simple date strings (YYYY-MM-DD)
   - No complex week calculations
   - Instant data access for cached dates

2. **Cache Management**:
   - Smart invalidation of only affected dates
   - LRU policy for memory optimization
   - Persistent storage for offline access

3. **Cache Statistics**:
   - 50% faster loading times
   - Reduced API calls (1-2 per view vs 14+ previously)
   - Immediate UI responsiveness

‚ö° REACT PERFORMANCE OPTIMIZATIONS
--------------------------------
1. **Component Optimization**:
   - React.memo for expensive components
   - useMemo for computed values
   - useCallback for stable references

2. **Rendering Efficiency**:
   - Custom memo comparison functions
   - Intersection Observer for lazy loading
   - CSS transitions for smooth UI

3. **Developer Tools**:
   - Performance monitoring integration
   - API call tracking
   - Cache hit/miss ratio monitoring

===============================================================================
üéØ APPLICATION FLOW & NAVIGATION
===============================================================================

üè† DASHBOARD (/)
---------------
LAYOUT: 4-card grid system

SUMMARY CARD:
- Today's Events (clickable) ‚Üí /notifications?tab=event
- Pending Tasks (clickable) ‚Üí /notifications?tab=task  
- Completed Today (clickable) ‚Üí /completed-tasks?date=today
- Motivational quotes display

TASKS CARD:
- Today's pending tasks list
- Task completion toggle (immediate Supabase sync)
- "Add Task" ‚Üí Quick task creation form
- Click task ‚Üí Detail popup with edit/delete options

EVENTS CARD:
- Today's scheduled events
- "Add Event" ‚Üí Quick event creation form
- Click event ‚Üí Detail popup with edit/delete options

DIARY CARD:
- Recent diary entries preview
- Click entry ‚Üí Entry details popup
- "Write Entry" ‚Üí /diary/write

üìÖ CALENDAR MODULE
-----------------
DAY VIEW (/calendar/day?date=YYYY-MM-DD):
- Navigation: ‚Üê Previous Day | Today | Next Day ‚Üí
- Tabs: Tasks/Events toggle
- Add buttons: Inline forms for quick creation
- Click items: Detail popups with edit/delete
- Optimized single-date data loading

WEEK VIEW (/calendar/week?date=YYYY-MM-DD):
- 7-day grid layout with performance monitoring
- Present-based data loading (no week ID calculations)
- Click day ‚Üí Navigate to day view
- Click task/event ‚Üí Detail popup
- Performance: React.memo optimization + debounced updates

MONTH VIEW (/calendar/month):
- Monthly calendar grid
- Month selector with sleek design and glow effects
- Click date ‚Üí Navigate to day view for that date

üìî DIARY MODULE
--------------
WRITE ENTRY (/diary/write):
- Rich text editor for content
- Mood selection with animated emojis
- Save ‚Üí Entry stored + redirect to view

VIEW ENTRIES (/diary/view):
- Chronological list of all entries
- Click entry ‚Üí Expanded view with full content

SEARCH (/diary/search):
- Search through past entries
- Filter by: date range, mood, keywords
- Click result ‚Üí Entry details popup

ü§ñ AI ASSISTANT (/chatbot)
-------------------------
- Chat interface with AI assistant
- Mood-responsive behavior adaptation
- Quick reply suggestions
- Chat history persistence
- Session management

üë§ PROFILE MODULE
----------------
LOGIN SYSTEM:
- 6-digit password maximum (security by simplicity)
- Registration with email validation
- Demo mode for quick testing
- Persistent authentication storage

SETTINGS (/profile/settings):
- User preferences configuration
- Account management options

AVATAR (/profile/avatar):
- Profile picture customization interface

===============================================================================
üêõ KNOWN ISSUES & SOLUTIONS
===============================================================================

‚ö†Ô∏è PYTHON 3.13 COMPATIBILITY
----------------------------
ISSUE: orjson dependency conflicts
SOLUTION: Users must install Python 3.13 separately, or use patch-orjson.py compatibility layer

‚ö†Ô∏è ELECTRON BACKEND STARTUP
---------------------------
ISSUE: Backend not starting in packaged app
SOLUTION: Enhanced Python executable detection

‚ö†Ô∏è CACHE RACE CONDITIONS  
------------------------
ISSUE: Data inconsistency during rapid updates
SOLUTION: Debounced cache updates + request deduplication

===============================================================================
üöÄ QUICK START COMMANDS
===============================================================================

üîß DEVELOPMENT:
npm run dev:full                    # Start full development environment
npm run backend:dev                 # Backend only
npm run dev                         # Frontend only

üèóÔ∏è BUILDING:
npm run build                       # Build frontend
npm run electron:build:win          # Package Windows app
npm run electron:build:mac          # Package macOS app  
npm run electron:build:linux        # Package Linux app
npm run package:all                 # Build all platforms

üß™ TESTING:
npm run preview                     # Preview production build
.\debug-wingman.bat                 # Debug packaged app

===============================================================================
üìÅ IMPORTANT FILES
===============================================================================

FRONTEND CORE:
- src/App.tsx                       # Main application component
- src/context/DataContext.tsx       # Global state management
- src/api/apiClient.ts              # HTTP client with retry logic
- src/config.ts                     # Environment configuration

BACKEND CORE:
- Wingman-backend/main.py           # FastAPI application
- Wingman-backend/app/core/supabase.py  # Database connection
- Wingman-backend/requirements.txt  # Python dependencies

ELECTRON:
- electron/main.js                  # Main process (backend startup)
- electron/preload.js               # Renderer security bridge

BUILD:
- package.json                      # Node.js project configuration
- vite.config.ts                    # Frontend build configuration
- complete-build.bat                # Automated build script

ENVIRONMENT:
- .env                              # Frontend environment variables
- Wingman-backend/.env              # Backend environment variables

===============================================================================
üéØ FUTURE ENHANCEMENTS
===============================================================================

PLANNED FEATURES:
- Task recurring patterns (weekly, monthly)
- Calendar synchronization with external services
- Advanced AI assistant capabilities
- Mobile application companion
- Team collaboration features
- Data export/import functionality

TECHNICAL IMPROVEMENTS:
- Progressive Web App (PWA) support
- Offline functionality with sync
- Advanced caching strategies
- Performance monitoring integration
- Automated testing suite

===============================================================================
üìû TROUBLESHOOTING
===============================================================================

üîç COMMON ISSUES:

1. "Backend not ready" error:
   - Check Python installation: py --version / python --version
   - Verify virtual environment: Wingman-backend/.venv/
   - Run: .\debug-wingman.bat for detailed logs

2. "API request failed" errors:
   - Verify .env files exist and have correct Supabase credentials
   - Check network connectivity
   - Restart development servers

3. Double entry submissions:
   - Clear browser cache
   - Check for multiple rapid clicks
   - Verify form submission prevention is working

4. Electron packaging failures:
   - Ensure all dependencies are installed
   - Check Python runtime inclusion
   - Verify build scripts have proper permissions

5. Python 3.13 compatibility:
   - Users need to install Python 3.13 separately
   - Alternative: Package Python 3.13 runtime with your app

===============================================================================
END OF COMPREHENSIVE GUIDE
===============================================================================
‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê  proxy   ‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê
‚îÇ ELECTRON    ‚îÇ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚ñ∂‚îÇ PYTHON       ‚îÇ
‚îÇ RENDERER    ‚îÇ          ‚îÇ BACKEND      ‚îÇ
‚îÇ localhost   ‚îÇ          ‚îÇ localhost    ‚îÇ
‚îÇ :5173       ‚îÇ‚óÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚ñ∂‚îÇ :8080        ‚îÇ
‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò          ‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò
‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê
‚îÇ   CONCURRENTLY  ‚îÇ
‚îú‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î§
‚îÇ [0] Backend     ‚îÇ ‚Üê Python FastAPI on :8080
‚îÇ [1] Frontend    ‚îÇ ‚Üê Vite dev server on :5173  
‚îÇ [2] Electron    ‚îÇ ‚Üê Loads http://localhost:5173
‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò